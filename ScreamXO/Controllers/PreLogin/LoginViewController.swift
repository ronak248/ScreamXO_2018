import UIKitclass LoginViewController: UIViewController ,iCarouselDelegate , iCarouselDataSource {    // MARK: IBOutlets        @IBOutlet  var carousel : iCarousel!    @IBOutlet var pageControl: UIPageControl!        // MARK: Page Life Cycle Methods        override func viewDidLoad() {        super.viewDidLoad()                self.carousel.bounces = false        self.carousel.isPagingEnabled = true            }    override func viewDidAppear(_ animated: Bool) {        super.viewDidAppear(animated)               // self.timer = NSTimer.scheduledTimerWithTimeInterval(5, target: self, selector:"timerSwipe", userInfo: nil, repeats: true)                //self.timerSwipe()    }        override func viewWillDisappear(_ animated: Bool) {        super.viewWillDisappear(animated)       //        if(!(self.timer == nil)){//            self.timer.invalidate()//        }          }        func timerSwipe(){//        if((self.carousel.currentItemIndex + 1) == 3){//            self.timer.invalidate()//        }         self.carousel.scrollToItem(at: (self.carousel.currentItemIndex + 1), animated: true)    }    override func didReceiveMemoryWarning() {        super.didReceiveMemoryWarning()        // Dispose of any resources that can be recreated.    }        override func viewWillAppear(_ animated: Bool) {        super.viewWillAppear(true)        self.navigationController?.isNavigationBarHidden = true    }        @IBAction func pageViewValueChanged(_ sender:AnyObject){        let page = self.pageControl.currentPage        carousel.scrollToItem(at: page, animated:true)    }        //MARK: _     func btnLoginClicked(_ sender:AnyObject) {        objAppDelegate.setRootViewController()    }        func numberOfItems(in carousel: iCarousel) -> Int {                return 4    }        func carousel(_ carousel: iCarousel, viewForItemAt index: Int, reusing view: UIView?) -> UIView {        if(view == nil){            let loginView = LoginView.initNib()            loginView.frame = CGRect(x: 0, y: 0, width: self.view.frame.size.width,height: self.view.frame.size.height)            loginView.imgviewTop.image = UIImage(named:String(format:"Option_%d",(index + 1)) )            loginView.btnFaceBook.addTarget(self, action: #selector(self.btnLoginClicked(_:)), for: UIControlEvents.touchUpInside)            loginView.backgroundColor = UIColor.clear            return loginView        }else{           let loginView = view as! LoginView            loginView.frame = CGRect(x: 0, y: 0, width: self.view.frame.size.width,height: self.view.frame.size.height)            loginView.imgviewTop.image = UIImage(named:String(format:"Option_%d",(index + 1)) )            loginView.btnFaceBook.addTarget(self, action: #selector(self.btnLoginClicked(_:)), for: UIControlEvents.touchUpInside)            return loginView        }            }    func carouselCurrentItemIndexDidChange(_ carousel: iCarousel) {        self.pageControl.currentPage = carousel.currentItemIndex    }            func carousel(_ carousel: iCarousel, valueFor option: iCarouselOption, withDefault value: CGFloat) -> CGFloat {        if(option == iCarouselOption.wrap){            return 0.0        }else{            return value        }    }}